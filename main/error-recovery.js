/**
 * Error Recovery - ÁÆÄÂåñÁöÑÈîôËØØÊÅ¢Â§çÁ≥ªÁªü
 *
 * ‰ªéÂéüÊù•ÁöÑ573Ë°åerror-recovery-system.jsÁÆÄÂåñËÄåÊù•
 * ‰∏ìÊ≥®‰∫éÊ†∏ÂøÉÈîôËØØÊÅ¢Â§çÂäüËÉΩÔºåÁßªÈô§ËøáÂ∫¶Â∑•Á®ãÂåñ
 *
 * @fileoverview ÁÆÄÂåñÈîôËØØÊÅ¢Â§çÂô®
 * @version 2.1.0
 * @author Claude Code Review System
 * @since 2024-10-11
 */

/**
 * @typedef {import('./types').ValidationError} ValidationError
 * @typedef {import('./types').ChessGameData} ChessGameData
 * @typedef {import('./types').Move} Move
 */

/**
 * ÁÆÄÂåñÁöÑÈîôËØØÊÅ¢Â§çÂô®
 * ÂÆûÁî®ÊÄßÂº∫ÔºåÊòì‰∫éÁª¥Êä§
 */
class ErrorRecovery {
    constructor() {
        this.recoveryStrategies = {
            // Ê†∏ÂøÉÊÅ¢Â§çÁ≠ñÁï•
            autoFix: new AutoFixStrategy(),
            skipMove: new SkipMoveStrategy(),
            // Êï∞ÊçÆ‰øÆÂ§çÁ≠ñÁï•
            repairNotation: new RepairNotationStrategy(),
            normalizePositions: new NormalizePositionsStrategy()
        };
    }

    /**
     * Â∞ùËØïÊÅ¢Â§çÈîôËØØÊï∞ÊçÆ
     * @param {ValidationError[]} errors - ÈîôËØØÂàóË°®
     * @param {ChessGameData|Move[]} data - ÂéüÂßãÊï∞ÊçÆ
     * @returns {Object} ÊÅ¢Â§çÁªìÊûú {success: boolean, data: any, report: string}
     */
    async recover(errors, data) {
        if (!errors || errors.length === 0) {
            return { success: true, data, report: 'Êó†ÈúÄÊÅ¢Â§çÂ§ÑÁêÜ' };
        }

        const report = ['ÂºÄÂßãÈîôËØØÊÅ¢Â§ç...'];
        let recoveredData = data;
        let success = false;

        // Êåâ‰ºòÂÖàÁ∫ßÂ∞ùËØïÊÅ¢Â§çÁ≠ñÁï•
        const strategies = ['skipMove', 'autoFix', 'repairNotation', 'normalizePositions'];

        for (const strategyName of strategies) {
            const strategy = this.recoveryStrategies[strategyName];

            if (strategy.canHandle(errors)) {
                try {
                    const result = await strategy.execute(recoveredData, errors);

                    if (result.success) {
                        recoveredData = result.data;
                        success = true;
                        report.push(`‚úÖ ${strategyName} Á≠ñÁï•ÊàêÂäü`);
                        break;
                    } else {
                        report.push(`‚ùå ${strategyName} Á≠ñÁï•Â§±Ë¥•: ${result.error}`);
                    }
                } catch (error) {
                    report.push(`‚ö†Ô∏è ${strategyName} Á≠ñÁï•ÂºÇÂ∏∏: ${error.message}`);
                }
            }
        }

        if (!success) {
            report.push('üîí ÊâÄÊúâÊÅ¢Â§çÁ≠ñÁï•ÂùáÂ§±Ë¥•ÔºåËøîÂõûÂéüÂßãÊï∞ÊçÆ');
        }

        return {
            success,
            data: recoveredData,
            report: report.join('\n')
        };
    }

    /**
     * Ëé∑ÂèñÈîôËØØ‰∏•ÈáçÁ®ãÂ∫¶
     * @param {ValidationError[]} errors - ÈîôËØØÂàóË°®
     * @returns {string} ‰∏•ÈáçÁ®ãÂ∫¶: 'low', 'medium', 'high', 'critical'
     */
    getErrorSeverity(errors) {
        if (!errors || errors.length === 0) return 'low';

        const severityCount = { critical: 0, high: 0, medium: 0, low: 0 };

        errors.forEach(error => {
            const severity = error.severity || 'medium';
            severityCount[severity]++;
        });

        if (severityCount.critical > 0) return 'critical';
        if (severityCount.high > 0) return 'high';
        if (severityCount.medium > 2) return 'high';
        if (severityCount.medium > 0) return 'medium';
        return 'low';
    }
}

/**
 * Ëá™Âä®‰øÆÂ§çÁ≠ñÁï•
 */
class AutoFixStrategy {
    canHandle(errors) {
        return errors.some(e => e.code === 'INVALID_POSITION' || e.code === 'INVALID_COLOR');
    }

    async execute(data, errors) {
        try {
            if (Array.isArray(data)) {
                const fixedData = data.map(item => this.fixItem(item, errors));
                return { success: true, data: fixedData };
            } else {
                const fixedData = this.fixItem(data, errors);
                return { success: true, data: fixedData };
            }
        } catch (error) {
            return { success: false, error: error.message };
        }
    }

    fixItem(item, errors) {
        const fixed = { ...item || {} };

        // ‰øÆÂ§ç‰ΩçÁΩÆÊ†ºÂºè
        if (fixed.fromPos && Array.isArray(fixed.fromPos)) {
            fixed.fromPos = { row: fixed.fromPos[0], col: fixed.fromPos[1] };
        }
        if (fixed.toPos && Array.isArray(fixed.toPos)) {
            fixed.toPos = { row: fixed.toPos[0], col: fixed.toPos[1] };
        }

        // ‰øÆÂ§çÈ¢úËâ≤ÈªòËÆ§ÂÄº
        if (!fixed.color && ['red', 'black'].includes(fixed.pieceColor)) {
            fixed.color = fixed.pieceColor;
        } else if (!fixed.color) {
            fixed.color = 'red';
        }

        return fixed;
    }
}

/**
 * Ë∑≥ËøáÁ≠ñÁï•
 */
class SkipMoveStrategy {
    canHandle(errors) {
        return errors.length > 5; // ÈîôËØØËøáÂ§öÊó∂Ë∑≥Ëøá
    }

    async execute(data, errors) {
        try {
            if (Array.isArray(data)) {
                // ËøáÊª§ÊéâÊúâ‰∏•ÈáçÈîôËØØÁöÑÈ°π
                const validData = data.filter((item, index) => {
                    return !errors.some(e => e.moveIndex === index && e.severity === 'critical');
                });
                return { success: true, data: validData };
            } else {
                return { success: false, error: 'Âçï‰∏™Êï∞ÊçÆÊó†Ê≥ïË∑≥Ëøá' };
            }
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
}

/**
 * ËÆ∞Ë∞±Ê≥ï‰øÆÂ§çÁ≠ñÁï•
 */
class RepairNotationStrategy {
    canHandle(errors) {
        return errors.some(e => e.code === 'MISSING_NOTATION' || e.code === 'INVALID_NOTATION');
    }

    async execute(data, errors) {
        try {
            const repairNotation = (item) => {
                const fixed = { ...item };
                if (!fixed.notation || fixed.notation.trim() === '') {
                    fixed.notation = `${fixed.pieceType || 'unknown'} ${fixed.color || 'red'}`;
                }
                return fixed;
            };

            if (Array.isArray(data)) {
                const fixedData = data.map(repairNotation);
                return { success: true, data: fixedData };
            } else {
                const fixedData = repairNotation(data);
                return { success: true, data: fixedData };
            }
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
}

/**
 * ‰ΩçÁΩÆÊ†áÂáÜÂåñÁ≠ñÁï•
 */
class NormalizePositionsStrategy {
    canHandle(errors) {
        return errors.some(e => e.code === 'INVALID_POSITION');
    }

    async execute(data, errors) {
        try {
            const normalizePosition = (pos) => {
                if (typeof pos === 'string') {
                    const parts = pos.split(/[,Ôºå]/);
                    if (parts.length === 2) {
                        const row = parseInt(parts[0].trim());
                        const col = parseInt(parts[1].trim());
                        if (!isNaN(row) && !isNaN(col)) {
                            return { row, col };
                        }
                    }
                }
                return pos;
            };

            const normalizeItem = (item) => {
                const fixed = { ...item };
                if (fixed.fromPos) fixed.fromPos = normalizePosition(fixed.fromPos);
                if (fixed.toPos) fixed.toPos = normalizePosition(fixed.toPos);
                return fixed;
            };

            if (Array.isArray(data)) {
                const fixedData = data.map(normalizeItem);
                return { success: true, data: fixedData };
            } else {
                const fixedData = normalizeItem(data);
                return { success: true, data: fixedData };
            }
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
}

// ÂØºÂá∫Ê®°Âùó
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { ErrorRecovery, AutoFixStrategy, SkipMoveStrategy, RepairNotationStrategy, NormalizePositionsStrategy };
}